#! /usr/bin/env ruby
$:.unshift(File.join(File.dirname($0), 'lib'))
require 'rubygems' rescue nil
require 'getopt'
require 'file/kind'
require 'fileutils'
require 'fileutils/sync'

class TrueClass
  def to_i
    return 1
  end
end

class FalseClass
  def to_i
    return 0
  end
end

argv = GetOpt.new($*, %w'
  f|force
  i|interactive
  L|follow
  a|all
  u|update
  s|symbolic
  h|help
', { :update => true })

if argv[:help]
  print <<"EOM"
Usage: #{File.basename($0)} [-fLih] src dst
Simply synchronize two directories.
Options:
  -f, --force        Force to copy when two files have different file types.
  -i, --interactive  Ask before override.
                     If it is given more than once, ask always.
  -L, --follow       Follow symbolic links.
  -a, --all          Do not ignore entries starting with '.'.
  -u, --update       Copy when source file is newer than destination.
                     This is the default behaviour.
  -s, --symbolic     Create symbolic link instead of copying.
  -h, --help         Show help.
EOM
  exit
end

files = {
  :src => (argv.rest+argv.args)[0],
  :dst => (argv.rest+argv.args)[1],
}
exit if files.map{|k,v| !v && !warn("#{k} not specified")}.any?
exit if !File.exist?(files[:src]) && !warn("no such file '#{file[:src]}'")

cp = proc do |src, dst|
  FileUtils.copy_entry(src, dst)
  puts("#{src} -> #{dst}")
end

symlink = proc do |src, dst|
  FileUtils.ln_s(src, dst)
  puts("#{src} -> #{dst}")
end

conflict = proc do |src, dst|
  puts("#{src} <-!-> #{dst}")
end

def force(m)
  return proc do |src, dst|
    FileUtils.rm_rf(dst)
    m.call(src, dst)
  end
end

def interact(m, level=1)
  return proc do |src, dst|
    if File.exist?(dst) || level > 1
      k = [ src, nil, dst ].map{|f| f ? File.kind(f, true).to_s : ''}
      f = [ src, '-?->', dst ]
      fields = k.zip(f).map{|a|n=a.map{|s|s.length}.max;a.map{|s|s.center(n)}}
      puts
      puts(fields.map{|f| f.first}.join(' '))
      print(fields.map{|f| f.last}.join(' ')+' [f]: ')

      input = gets.strip
      m.call(src, dst) if input.empty? || input[0].chr == 'f'
    else
      m.call(src, dst)
    end
  end
end

method = argv[:symbolic] ? symlink : cp
method = force(method) if argv[:force]
method = interact(method, argv[:interactive].to_i) if argv[:interactive]

nothing = proc{}
nothing = method if !argv[:update] || argv[:force].to_i > 1

conflict = method if argv[:force]

opt = {
  :method => {
    :uptodate => method,
    :nothing  => nothing,
    :conflict => conflict,
  },
  :flag => (argv[:all] && File::FNM_DOTMATCH) ||  0,
  :nofollow => !argv[:follow],
}

FileUtils.sync(files[:src], files[:dst], opt)
