#! /usr/bin/env ruby
$:.unshift(File.join(File.dirname($0), 'lib'))
begin
  require 'rubygems'
rescue LoadError
end
require 'generator'
require 'getopt'
require 'dir/each_leaf'

argv = GetOpt.new($*, %w'
  i|stdin
  l|leaf
  d|dry
  s|silent
  h|help
')

if argv[:help]
  name = File.basename($0)
  print <<"EOM"
Usage: #{name} [OPTIONS] PATTERN REPLACEMENT
  Renames files matched by PATTERN. The new name is specified by REPLACEMENT,
  which may contain Ruby expression as \#{expression} and n-th matched string
  as \#{$1}. The syntax of PATTERN is either '/pattern string/L' where L
  represents options, or just 'pattern string', which is treated as
  '/pattern string/' with no option. Target files of matching are all files in
  the current directory (including subdirectories with -l option) unless they
  are supplied in each line of the standard input with -i option. If the
  destination file exists, a prompt will be shown to ask whether it should be
  overwritten, or just skipped when -i option is used.
Options:
  -i, --stdin  read file list from standard input
  -l, --leaf   look into subdirectories and do not match directories themselves
  -d, --dry    do nothing but show what is going to be done without this option
  -f, --force  force overwriting
Example:
  [1] #{name} '.*(\\d\\d\\d\\d-\\d\\d-\\d\\d).*(\\....)' '$1$2'
    'aaa2007-10-14bbb.ext' -> '2007-10-14.ext'
    '2010-07-02T16:30:26Z.html' -> '2010-07-02.htm'
  [2] #{name} '/(.*)(\\.pdf)/i' '\#\{$1.upcase\}\#{$2}'
    'something.pdf' -> 'SOMETHING.pdf'
    'anotherone.PDF' -> 'ANOTHERONE.PDF'
EOM
  exit
end

def make_action(p, r, d, f, i)
  def msg(f, t); return "'#{f}' -> '#{t}'" end
  act = proc{|from, to| File.rename(from, to)}
  info = proc{|from, to| puts(msg(from, to))}
  warn = proc{|from,to| $stderr.print('[overwriting]: '); true}
  act = info if d
  ask = proc do |from,to|
    print("overwrite '#{to}' by '#{from}'? [y/n]: ")
    gets =~ /^y/
  end
  skip = proc{|from,to| $stderr.puts("[skip]: #{msg(from, to)}")}
  ask = skip if i
  warn = ask unless d

  regex = instance_eval(p)
  r = "\"#{r}\""
  return proc do |file|
    if file =~ regex
      dst = instance_eval(r)
      dir = File.dirname(file)
      dst = File.join(dir, dst) if dir != '.' || file =~ /^\./
      begin
        act.call(file, dst) if !File.exist?(dst) || f || warn.call(file, dst)
      rescue => e
        $stderr.puts(e)
      end
    end
  end
end

p, r = argv.args + argv.rest
p = '/'+p+'/' unless p =~ /^\/.*\/$/
r = r.gsub(/(\$\d+)/){|m| '#{'+m+'}'} if r =~ /^(?:\$\d+)+$/
action = make_action(p, r, argv[:dry], argv[:force], argv[:stdin])

FLAGS = File::FNM_PATHNAME|File::FNM_DOTMATCH
if argv[:stdin]
  $stdin.read.each_line{|line| action.call(line.strip)}
elsif argv[:leaf]
  g = Generator.new{|g| Dir.each_leaf('.', FLAGS){|x| g.yield(x)}}.sort
  g.each(&action)
else
  Dir.glob('*', FLAGS).reject{|f| f=~ /^\/\.+$/}.sort.each(&action)
end
